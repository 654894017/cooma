{"name":"Cooma","tagline":"a simple and flexible microcontainer of Java","body":"[Cooma](https://github.com/alibaba/cooma/wiki)是一个极简、灵活的开源Java微容器（microcontainer）实现。\r\n\r\n概述\r\n==========================\r\n\r\n[Cooma](https://github.com/alibaba/cooma/wiki)适用于为 **框架**扩展点（Extension）的加载和配置。\r\n\r\n使用Cooma可以避免：\r\n\r\n- 自己写一个潦草的微容器：\r\n    - 随着自身框架的发展，不断投入时间在微容器上增加新的常用功能，提高实现的强度。\r\n    - 调整微容器，需要重构上层逻辑结构，无趣又容易出错。\r\n- 使用其它过于庞大的容器，比如`Spring`：\r\n    - 对于一个框架，尤其是一个小框架，不能大依赖\r\n    - 框架对依赖引入要小，有利于自身简单易用。\r\n\r\n`Cooma`的代码来源于[Dubbo](http://code.alibabatech.com/wiki/display/dubbo)项目中被长时间使用和验证的实现。在极简的前提下，保证了功能成熟完备，可以应付框架的扩展需求。使用中有功能、使用方式等等问题，欢迎联系[Cooma Team](mailto:java-cooma@googlegroups.com)。\r\n\r\n实现原型来自于[Service implementation of JDK5](http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider)。\r\n\r\n参见[Quick Start](https://github.com/alibaba/cooma/wiki/QuickStart)中的示例代码及其说明，快速了解。\r\n\r\n### 概念上极简独立\r\n\r\n* 完全割除与容器不相关的概念。\r\n* 审视已有的概念，谨慎引入新概念。\r\n\r\n### 实现上简单直白\r\n\r\n* 实现代码 **少于1000行**（不含代码注释）。  \r\n使用[sloccount](http://www.dwheeler.com/sloccount/)统计`0.2.1`版本的实现代码是 *780行*。\r\n* 保持代码可读性。\r\n* 不考虑没有实际应用的概念。\r\n* 谨慎对待性能优化；不能因此打乱代码的简单性。\r\n\r\n### 集成上的简易灵活\r\n\r\n* 保持灵活的扩展性。\r\n* 开发者友好。\r\n* 集成是否简易是设计是否良好的有效指标。\r\n\r\n功能\r\n==========================\r\n\r\n* 以插件方式加载扩展\r\n* 支持依赖扩展点的自动加载（扩展的IOC）\r\n* 可以有扩展点Wrapper，为扩展写公共Filter代码（扩展的AOP）\r\n* 统一的配置方式来配置各级扩展点\r\n* 查询插件实现\r\n* 支持配置方式/编程方式\r\n\r\n核心概念\r\n===========================\r\n\r\n- Extension Point，扩展点，要扩展的接口\r\n- Extension，扩展，即扩展点的实现\r\n- Extension Instance，扩展实例，即扩展点实现类的实例  \r\n\\# ExtensionLoader中维护了Extension Instance的 **单例**。\r\n- Extension Adaptive Instance，扩展的自适应实例\r\n- Extension Wrapper，所有扩展点实现调用时都会先触发的执行\r\n\r\n相关产品\r\n==========================\r\n\r\n- [Spring](http://www.springsource.org/)\r\n- [Google Guice](http://code.google.com/p/google-guice/)\r\n- [microcontainer of JBoss](http://www.jboss.org/jbossmc/) \r\n- [Excalibur](http://excalibur.apache.org/)\r\n- [Loom](http://loom.codehaus.org/)\r\n- [nanocontainer](http://nanocontainer.codehaus.org/)\r\n- [picocontainer](http://www.picocontainer.org/)\r\n\r\n更多内容参见：\r\n\r\n- http://www.ideagrace.com/sf/containers/\r\n- http://www.open-open.com/11.htm\r\n- http://www.oschina.net/project/tag/173/aop?sort=view&lang=19&os=0\r\n\r\n项目起源\r\n==========================\r\n\r\n[Dubbo](http://code.alibabatech.com/wiki/display/dubbo)项目中有一个微容器实现，这个微容器管理了Dubbo的各个扩展点（组件）：\r\n\r\n- 初始化和持有扩展\r\n- 能够以插件的方式加载扩展，从而可以由第三方写组件的插件\r\n- 以简洁字符串的方式统一配置各级扩展\r\n- 依赖扩展的自动注入（IOC）\r\n- 可以为扩展写公共Filter代码（AOP）\r\n\r\n但Dubbo的微容器实现耦合微容器之外RPC的概念，这样功能复杂显不清晰，这是代码的坏味道（bad smell）。所以把Dubbo的微容器的代码独立拿出来发展；另外拿出来后，可以独立改进，而不会有兼容Dubbo已有用法的历史包袱。\r\n\r\n这个实现取名为Cooma。和Dubbo一样，Cooma也是一个澳大利亚地名，显示出和Dubbo的渊源关系；  \r\n另外，和“Container”一样，Cooma以“Co”开头，表示是一个容器，方便联想记忆。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}